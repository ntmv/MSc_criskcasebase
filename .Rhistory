}
return(list(sim_coefficient_table = sim_coefficient_results, sim_MSE_table = sim_MSE_results))
}
sim_results = runSim(20, 400, 2, TRUE)
sim_results$sim_coefficient_table
sim_results$sim_MSE_table
library(casebase)
library(future.apply)
library(glmnet)
#library(mtool)
library(parallelly)
library(timereg)
library(parallel)
library(tictoc)
library(tidyverse)
#library(riskRegression)
library(cmprsk)
library(survsim)
library(caret)
library(Matrix)
library(dplyr)
# Helper functions
source("src/helper_functions.R")
formatCoefficientTable = function(p, n, coefficient_names, resulting_fits, print_time) {
model_fit_labels = c("cv.glmnet relax = FALSE, LASSO, lambda min", "cv.glmnet relax = FALSE, LASSO, lambda 1se",
"cv.glmnet relax = TRUE, lambda min", "cv.glmnet relax = TRUE, lambda 1se",
"Relaxed LASSO implementation no CV", "Relaxed LASSO implementation CV",
"Post LASSO lambda min", "Post LASSO lambda 1se")
# Create dataframes to keep track of coefficient values and MSEs per each iteration of simulation
coefficient_values = data.frame(matrix(nrow = 0, ncol = length(coefficient_names)))
col_names = rownames(as.data.frame.matrix(coef(resulting_fits$cv_glmnet_relaxed)))
coef_values = as.numeric(coef(resulting_fits$post_lasso_lambda_min))
coef_names = rownames(coef(resulting_fits$post_lasso_lambda_min))
names(coef_values) = coef_names
y_post_lasso_lambda_min_coefficient_row = formatCoefficientTableRow(coef_values, col_names)
coef_values = as.numeric(coef(resulting_fits$post_lasso_lambda_1se))
coef_names = rownames(coef(resulting_fits$post_lasso_lambda_1se))
names(coef_values) = coef_names
y_post_lasso_lambda_1se_coefficient_row = formatCoefficientTableRow(coef_values, col_names)
coefficient_values = rbind(coefficient_values,
c(0, resulting_fits$cv_glmnet$glmnet.fit$beta[, resulting_fits$cv_glmnet$index[1]]),
c(0, coef(resulting_fits$cv_glmnet)[-1]),
c(0, resulting_fits$cv_glmnet_relaxed$glmnet.fit$relaxed$beta[, resulting_fits$cv_glmnet_relaxed$relaxed$index[1]]),
c(0, coef(resulting_fits$cv_glmnet_relaxed)[-1]),
c(0, resulting_fits$my_relaxed$coefficients[resulting_fits$my_relaxed$min_lambda_index, -1]),
c(0, resulting_fits$my_relaxed_cv$coefficients[resulting_fits$my_relaxed_cv$min_lambda_index, -1]),
c(0, y_post_lasso_lambda_min_coefficient_row),
c(0, y_post_lasso_lambda_1se_coefficient_row))
options(digits = 5)
colnames(coefficient_values) = coefficient_names
coefficient_values[, 1] = model_fit_labels
return(coefficient_values)
}
oneIteration = function(p, n, training_data, test_data, print_time) {
# tryCatch({
# Fit training data with different models
resulting_fits = fitAll(training_data$x_train, training_data$y_train, FALSE)
# Get table of coefficient values for each model
coefficient_names = colnames(as.data.frame(training_data$x_train))
coefficient_names = c("Model", coefficient_names)
coefs = formatCoefficientTable(p, n, coefficient_names, resulting_fits, print_time)
# Compute biases
MSEs = computeMSEs(resulting_fits, test_data)
result = list(coefficient_table = coefs, MSE_table = MSEs)
return(result)
# },
# error = function(e) {
#   # print(e)
# })
}
runSim = function(p, n, N, print_time) {
# Generate/split data
p = 20
n = 400
N = 2
dataset = generateDataset(p, n)
partitioned_data = partitionData(dataset$X, dataset$Y)
test_data = partitioned_data[c("x_test", "y_test")]
# Run simulation N times
sim_replicates = replicate(N, {
dataset = generateDataset(p, n)
partitioned_data = partitionData(dataset$X, dataset$Y)
training_data = partitioned_data[c("x_train", "y_train")]
result_one_iter = oneIteration(p, n, training_data, test_data, print_time)
result = list(coefficient_table = result_one_iter[[1]], MSE_table = result_one_iter[[2]])
return(result)
}, simplify = FALSE)
sim_replicates
#TODO: Fix convoluted method of binding resulting tables from simulation
sim_coefficient_results = data.frame(matrix(nrow = 0, ncol = ncol(sim_replicates[[1]][[1]])))
sim_MSE_results = data.frame(matrix(nrow = 0, ncol = ncol(sim_replicates[[1]][[2]])))
for(i in c(1:N)) {
sim_coefficient_results = rbind(sim_coefficient_results, sim_replicates[[i]][[1]])
sim_MSE_results = rbind(sim_MSE_results, sim_replicates[[i]][[2]])
}
return(list(sim_coefficient_table = sim_coefficient_results, sim_MSE_table = sim_MSE_results))
}
sim_results = runSim(20, 400, 2, TRUE)
sim_results$sim_coefficient_table
sim_results$sim_MSE_table
library(casebase)
library(future.apply)
library(glmnet)
#library(mtool)
library(parallelly)
library(timereg)
library(parallel)
library(tictoc)
library(tidyverse)
#library(riskRegression)
library(cmprsk)
library(survsim)
library(caret)
library(Matrix)
library(dplyr)
# Helper functions
source("src/helper_functions.R")
oneIteration = function(p, n, training_data, test_data, print_time) {
tryCatch({
# Fit training data with different models
resulting_fits = fitAll(training_data$x_train, training_data$y_train, FALSE)
# Get table of coefficient values for each model
coefficient_names = colnames(as.data.frame(training_data$x_train))
coefficient_names = c("Model", coefficient_names)
coefs = formatCoefficientTable(p, n, coefficient_names, resulting_fits, print_time)
# Compute biases
MSEs = computeMSEs(resulting_fits, test_data)
result = list(coefficient_table = coefs, MSE_table = MSEs)
return(result)
},
error = function(e) {
print(e)
})
}
runSim = function(p, n, N, print_time) {
# Generate/split data
dataset = generateDataset(p, n)
partitioned_data = partitionData(dataset$X, dataset$Y)
test_data = partitioned_data[c("x_test", "y_test")]
# Run simulation N times
sim_replicates = replicate(N, {
dataset = generateDataset(p, n)
partitioned_data = partitionData(dataset$X, dataset$Y)
training_data = partitioned_data[c("x_train", "y_train")]
result_one_iter = oneIteration(p, n, training_data, test_data, print_time)
result = list(coefficient_table = result_one_iter[[1]], MSE_table = result_one_iter[[2]])
return(result)
}, simplify = FALSE)
sim_replicates
#TODO: Fix convoluted method of binding resulting tables from simulation
sim_coefficient_results = data.frame(matrix(nrow = 0, ncol = ncol(sim_replicates[[1]][[1]])))
sim_MSE_results = data.frame(matrix(nrow = 0, ncol = ncol(sim_replicates[[1]][[2]])))
for(i in c(1:N)) {
sim_coefficient_results = rbind(sim_coefficient_results, sim_replicates[[i]][[1]])
sim_MSE_results = rbind(sim_MSE_results, sim_replicates[[i]][[2]])
}
return(list(sim_coefficient_table = sim_coefficient_results, sim_MSE_table = sim_MSE_results))
}
sim_results = runSim(20, 400, 2, TRUE)
sim_results$sim_coefficient_table
sim_results$sim_MSE_table
library(casebase)
library(future.apply)
library(glmnet)
#library(mtool)
library(parallelly)
library(timereg)
library(parallel)
library(tictoc)
library(tidyverse)
#library(riskRegression)
library(cmprsk)
library(survsim)
library(caret)
library(Matrix)
library(dplyr)
# Helper functions
source("src/helper_functions.R")
oneIteration = function(p, n, training_data, test_data, print_time) {
tryCatch({
# Fit training data with different models
resulting_fits = fitAll(training_data$x_train, training_data$y_train, FALSE)
# Get table of coefficient values for each model
coefficient_names = colnames(as.data.frame(training_data$x_train))
coefficient_names = c("Model", coefficient_names)
coefs = formatCoefficientTable(p, n, coefficient_names, resulting_fits, print_time)
# Compute biases
MSEs = computeMSEs(resulting_fits, test_data)
result = list(coefficient_table = coefs, MSE_table = MSEs)
return(result)
},
error = function(e) {
print(e)
})
}
runSim = function(p, n, N, print_time) {
# Generate/split data
dataset = generateDataset(p, n)
partitioned_data = partitionData(dataset$X, dataset$Y)
test_data = partitioned_data[c("x_test", "y_test")]
# Run simulation N times
sim_replicates = replicate(N, {
dataset = generateDataset(p, n)
partitioned_data = partitionData(dataset$X, dataset$Y)
training_data = partitioned_data[c("x_train", "y_train")]
result_one_iter = oneIteration(p, n, training_data, test_data, print_time)
result = list(coefficient_table = result_one_iter[[1]], MSE_table = result_one_iter[[2]])
return(result)
}, simplify = FALSE)
sim_replicates
#TODO: Fix convoluted method of binding resulting tables from simulation
sim_coefficient_results = data.frame(matrix(nrow = 0, ncol = ncol(sim_replicates[[1]][[1]])))
sim_MSE_results = data.frame(matrix(nrow = 0, ncol = ncol(sim_replicates[[1]][[2]])))
for(i in c(1:N)) {
sim_coefficient_results = rbind(sim_coefficient_results, sim_replicates[[i]][[1]])
sim_MSE_results = rbind(sim_MSE_results, sim_replicates[[i]][[2]])
}
return(list(sim_coefficient_table = sim_coefficient_results, sim_MSE_table = sim_MSE_results))
}
sim_results = runSim(20, 400, 2, TRUE)
sim_results$sim_coefficient_table
sim_results$sim_MSE_table
runSim = function(p, n, N, print_time) {
# Generate/split data
dataset = generateDataset(p, n)
partitioned_data = partitionData(dataset$X, dataset$Y)
test_data = partitioned_data[c("x_test", "y_test")]
# Run simulation N times
sim_replicates = replicate(N, {
dataset = generateDataset(p, n)
partitioned_data = partitionData(dataset$X, dataset$Y)
training_data = partitioned_data[c("x_train", "y_train")]
result_one_iter = oneIteration(p, n, training_data, test_data, print_time)
result = list(coefficient_table = result_one_iter[[1]], MSE_table = result_one_iter[[2]])
return(result)
#TODO: Fix convoluted method of binding resulting tables from simulation
sim_coefficient_results = data.frame(matrix(nrow = 0, ncol = ncol(sim_replicates[[1]][[1]])))
sim_MSE_results = data.frame(matrix(nrow = 0, ncol = ncol(sim_replicates[[1]][[2]])))
for(i in c(1:N)) {
sim_coefficient_results = rbind(sim_coefficient_results, sim_replicates[[i]][[1]])
sim_MSE_results = rbind(sim_MSE_results, sim_replicates[[i]][[2]])
}
return(list(sim_coefficient_table = sim_coefficient_results, sim_MSE_table = sim_MSE_results))
}
sim_results = runSim(20, 400, 2, TRUE)
runSim = function(p, n, N, print_time) {
# Generate/split data
dataset = generateDataset(p, n)
partitioned_data = partitionData(dataset$X, dataset$Y)
test_data = partitioned_data[c("x_test", "y_test")]
# Run simulation N times
sim_replicates = replicate(N, {
dataset = generateDataset(p, n)
partitioned_data = partitionData(dataset$X, dataset$Y)
training_data = partitioned_data[c("x_train", "y_train")]
result_one_iter = oneIteration(p, n, training_data, test_data, print_time)
result = list(coefficient_table = result_one_iter[[1]], MSE_table = result_one_iter[[2]])
return(result)
}
#TODO: Fix convoluted method of binding resulting tables from simulation
sim_coefficient_results = data.frame(matrix(nrow = 0, ncol = ncol(sim_replicates[[1]][[1]])))
runSim = function(p, n, N, print_time) {
# Generate/split data
dataset = generateDataset(p, n)
partitioned_data = partitionData(dataset$X, dataset$Y)
test_data = partitioned_data[c("x_test", "y_test")]
# Run simulation N times
sim_replicates = replicate(N, {
dataset = generateDataset(p, n)
partitioned_data = partitionData(dataset$X, dataset$Y)
training_data = partitioned_data[c("x_train", "y_train")]
result_one_iter = oneIteration(p, n, training_data, test_data, print_time)
result = list(coefficient_table = result_one_iter[[1]], MSE_table = result_one_iter[[2]])
return(result)
}
#TODO: Fix convoluted method of binding resulting tables from simulation
sim_coefficient_results = data.frame(matrix(nrow = 0, ncol = ncol(sim_replicates[[1]][[1]])))
runSim = function(p, n, N, print_time) {
# Generate/split data
dataset = generateDataset(p, n)
partitioned_data = partitionData(dataset$X, dataset$Y)
test_data = partitioned_data[c("x_test", "y_test")]
# Run simulation N times
sim_replicates = replicate(N, {
dataset = generateDataset(p, n)
partitioned_data = partitionData(dataset$X, dataset$Y)
training_data = partitioned_data[c("x_train", "y_train")]
result_one_iter = oneIteration(p, n, training_data, test_data, print_time)
result = list(coefficient_table = result_one_iter[[1]], MSE_table = result_one_iter[[2]])
return(result)
}, simplify = FALSE)
#TODO: Fix convoluted method of binding resulting tables from simulation
sim_coefficient_results = data.frame(matrix(nrow = 0, ncol = ncol(sim_replicates[[1]][[1]])))
sim_MSE_results = data.frame(matrix(nrow = 0, ncol = ncol(sim_replicates[[1]][[2]])))
for(i in c(1:N)) {
sim_coefficient_results = rbind(sim_coefficient_results, sim_replicates[[i]][[1]])
sim_MSE_results = rbind(sim_MSE_results, sim_replicates[[i]][[2]])
}
return(list(sim_coefficient_table = sim_coefficient_results, sim_MSE_table = sim_MSE_results))
}
sim_results = runSim(20, 400, 2, TRUE)
#TODO: Fix convoluted method
sim_results$sim_coefficient_table
library(casebase)
library(future.apply)
library(glmnet)
#library(mtool)
library(parallelly)
library(timereg)
library(parallel)
library(tictoc)
library(tidyverse)
#library(riskRegression)
library(cmprsk)
library(survsim)
library(caret)
library(Matrix)
library(dplyr)
# Helper functions
source("src/helper_functions.R")
sim_results = runSim(20, 400, 2, TRUE)
View(sim_results)
library(casebase)
library(future.apply)
library(glmnet)
#library(mtool)
library(parallelly)
library(timereg)
library(parallel)
library(tictoc)
library(tidyverse)
#library(riskRegression)
library(cmprsk)
library(survsim)
library(caret)
library(Matrix)
library(dplyr)
# Helper functions
source("src/helper_functions.R")
library(casebase)
library(future.apply)
library(glmnet)
#library(mtool)
library(parallelly)
library(timereg)
library(parallel)
library(tictoc)
library(tidyverse)
#library(riskRegression)
library(cmprsk)
library(survsim)
library(caret)
library(Matrix)
library(dplyr)
# Helper functions
source("src/helper_functions.R")
sim_results = runSim(20, 400, 2, TRUE)
formatCoefficientBiasTable(sim_results)
formatAverageTestMSETable(sim_results)
write.csv(bias_table, prediction_MSE_table, file = paste0(runif(1), "iid_linear_relaxed.csv"))
bias_table = formatCoefficientBiasTable(sim_results)
library(Matrix)
source("~/dev/casebase_relaxed_LASSO/sample_script/relaxed_simulation_script.R", echo=TRUE)
library(casebase)
library(future.apply)
library(glmnet)
#library(mtool)
library(parallelly)
library(timereg)
library(parallel)
library(tictoc)
library(tidyverse)
#library(riskRegression)
library(cmprsk)
library(survsim)
library(caret)
library(Matrix)
library(dplyr)
# Helper functions
source("src/helper_functions.R")
library(casebase)
library(future.apply)
library(glmnet)
#library(mtool)
library(parallelly)
library(timereg)
library(parallel)
library(tictoc)
library(tidyverse)
#library(riskRegression)
library(cmprsk)
library(survsim)
library(caret)
library(Matrix)
library(dplyr)
# Helper functions
source("src/helper_functions.R")
sim_results = runSim(20, 400, 2, TRUE)
formatCoefficientBiasTable(sim_results)
formatAverageTestMSETable(sim_results)
library(casebase)
library(future.apply)
library(glmnet)
#library(mtool)
library(parallelly)
library(timereg)
library(parallel)
library(tictoc)
library(tidyverse)
#library(riskRegression)
library(cmprsk)
library(survsim)
library(caret)
library(Matrix)
library(dplyr)
# Helper functions
source("src/helper_functions.R")
setwd("~/dev/casebase_relaxed_LASSO")
library(casebase)
library(future.apply)
library(glmnet)
#library(mtool)
library(parallelly)
library(timereg)
library(parallel)
library(tictoc)
library(tidyverse)
#library(riskRegression)
library(cmprsk)
library(survsim)
library(caret)
library(Matrix)
library(dplyr)
# Helper functions
source("src/helper_functions.R")
setwd("~/dev/casebase_relaxed_LASSO/sample_script")
library(casebase)
library(future.apply)
library(glmnet)
#library(mtool)
library(parallelly)
library(timereg)
library(parallel)
library(tictoc)
library(tidyverse)
#library(riskRegression)
library(cmprsk)
library(survsim)
library(caret)
library(Matrix)
library(dplyr)
# Helper functions
source("src/helper_functions.R")
# Run simulation
sim_results = runSim(20, 400, 2, TRUE)
# Get coefficient biases
bias_table = formatCoefficientBiasTable(sim_results)
# Get average test prediction MSE
prediction_MSE_table = formatAverageTestMSETable(sim_results)
write.csv(bias_table, prediction_MSE_table, file = paste0(runif(1), "iid_linear_relaxed.csv"))
write.csv(bias_table, file = paste0(runif(1), "iid_linear_relaxed.csv"))
write.csv(bias_table, file = "results/iid_linear_relaxed.csv")
library(casebase)
library(future.apply)
library(glmnet)
#library(mtool)
library(parallelly)
library(timereg)
library(parallel)
library(tictoc)
library(tidyverse)
#library(riskRegression)
library(cmprsk)
library(survsim)
library(caret)
library(Matrix)
library(dplyr)
# Helper functions
source("src/helper_functions.R")
# Run simulation
sim_results = runSim(20, 400, 2, TRUE)
# Get coefficient biases
bias_table = formatCoefficientBiasTable(sim_results)
# Get average test prediction MSE
prediction_MSE_table = formatAverageTestMSETable(sim_results)
write.csv(bias_table, file = "results/iid_linear_relaxed.csv")
write.csv(prediction_MSE_table, file = "results/iid_linear_relaxed.csv")
library(casebase)
library(future.apply)
library(glmnet)
#library(mtool)
library(parallelly)
library(timereg)
library(parallel)
library(tictoc)
library(tidyverse)
#library(riskRegression)
library(cmprsk)
library(survsim)
library(caret)
library(Matrix)
library(dplyr)
# Helper functions
source("src/helper_functions.R")
# Run simulation
sim_results = runSim(20, 400, 2, TRUE)
# Get coefficient biases
bias_table = formatCoefficientBiasTable(sim_results)
# Get average test prediction MSE
prediction_MSE_table = formatAverageTestMSETable(sim_results)
write.csv(bias_table, file = "results/iid_coefficient_relaxed.csv")
write.csv(prediction_MSE_table, file = "results/iid_MSE_relaxed.csv")
